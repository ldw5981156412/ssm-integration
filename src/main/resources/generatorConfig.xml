<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration
        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">
<generatorConfiguration>
    <!--导入属性配置 -->
    <properties resource="generatorConfig.properties"></properties>

    <!--
       出现错误：Caused by: java.lang.ClassNotFoundException: com.mysql.jdbc.Driver
       解决办法：将本地的MAVEN仓库中的mysql驱动引入进来
   -->
    <!--指定特定数据库的jdbc驱动jar包的位置 -->
    <classPathEntry location="${M2_REPO}/mysql/mysql-connector-java/5.1.18/mysql-connector-java-5.1.18.jar"/>

    <context id="default" targetRuntime="MyBatis3">
        <!-- 生成的Java文件的编码 -->
        <property name="javaFileEncoding" value="UTF-8"/>
        <!-- 格式化java代码 -->
        <property name="javaFormatter" value="org.mybatis.generator.api.dom.DefaultJavaFormatter"/>
        <!-- 格式化XML代码 -->
        <!--<property name="xmlFormatter" value="org.mybatis.generator.api.dom.DefaultXmlFormatter"/>-->

        <plugin type="org.mybatis.generator.plugins.SerializablePlugin"/>
        <plugin type="org.mybatis.generator.plugins.RowBoundsPlugin"/>
        <plugin type="org.mybatis.generator.plugins.RenameExampleClassPlugin">
            <property name="searchString" value="Example$"/>
            <property name="replaceString" value="Criteria"/>
        </plugin>

        <!--不生成注释-->
        <commentGenerator>
            <property name="suppressAllComments" value="true"/>
        </commentGenerator>


        <!--jdbc的数据库连接 -->
        <jdbcConnection driverClass="${jdbc_driver}"
                        connectionURL="${jdbc_url}"
                        userId="${jdbc_username}" password="${jdbc_password}"/>


        <!-- 非必需，类型处理器，在数据库类型和java类型之间的转换控制-->
        <javaTypeResolver>
            <property name="forceBigDecimals" value="false"/>
        </javaTypeResolver>

        <!-- Model模型生成器,用来生成含有主键key的类，记录类 以及查询Example类
            targetPackage     指定生成的model生成所在的包名
            targetProject     指定在该项目下所在的路径
        -->
        <javaModelGenerator targetPackage="com.dwliu.ssmintegration.dao.entity" targetProject="src/main/java">
            <!-- 设置是否在getter方法中，对String类型字段调用trim()方法 -->
            <property name="trimStrings" value="true"/>
        </javaModelGenerator>

        <!--Mapper映射文件生成所在的目录 为每一个数据库的表生成对应的SqlMap文件 -->
        <sqlMapGenerator targetPackage="com.dwliu.ssmintegration.dao.mapper" targetProject="src/main/resources"/>
        <!-- 客户端代码，生成易于使用的针对Model对象和XML配置文件 的代码
                type="ANNOTATEDMAPPER",生成Java Model 和基于注解的Mapper对象
                type="MIXEDMAPPER",生成基于注解的Java Model 和相应的Mapper对象
                type="XMLMAPPER",生成SQLMap XML文件和独立的Mapper接口
        -->
        <javaClientGenerator targetPackage="com.dwliu.ssmintegration.dao.mapper" targetProject="src/main/java" type="XMLMAPPER"/>
        <!-- 选择一个table来生成相关文件，可以有一个或多个table，必须要有table元素
	        选择的table会生成一下文件：
	        1，SQL map文件
	        2，生成一个主键类；
	        3，除了BLOB和主键的其他字段的类；
	        4，包含BLOB的类；
	        5，一个用户生成动态查询的条件类（selectByExample, deleteByExample），可选；
	        6，Mapper接口（可选）

	        tableName（必要）：要生成对象的表名；
	        注意：大小写敏感问题。正常情况下，MBG会自动的去识别数据库标识符的大小写敏感度，在一般情况下，MBG会
	            根据设置的schema，catalog或tablename去查询数据表，按照下面的流程：
	            1，如果schema，catalog或tablename中有空格，那么设置的是什么格式，就精确的使用指定的大小写格式去查询；
	            2，否则，如果数据库的标识符使用大写的，那么MBG自动把表名变成大写再查找；
	            3，否则，如果数据库的标识符使用小写的，那么MBG自动把表名变成小写再查找；
	            4，否则，使用指定的大小写格式查询；
	        另外的，如果在创建表的时候，使用的""把数据库对象规定大小写，就算数据库标识符是使用的大写，在这种情况下也会使用给定的大小写来创建表名；
	        这个时候，请设置delimitIdentifiers="true"即可保留大小写格式；

	        可选：
	        1，schema：数据库的schema；
	        2，catalog：数据库的catalog；
	        3，alias：为数据表设置的别名，如果设置了alias，那么生成的所有的SELECT SQL语句中，列名会变成：alias_actualColumnName
	        4，domainObjectName：生成的domain类的名字，如果不设置，直接使用表名作为domain类的名字；可以设置为somepck.domainName，那么会自动把domainName类再放到somepck包里面；
	        5，enableInsert（默认true）：指定是否生成insert语句；
	        6，enableSelectByPrimaryKey（默认true）：指定是否生成按照主键查询对象的语句（就是getById或get）；
	        7，enableSelectByExample（默认true）：MyBatis3Simple为false，指定是否生成动态查询语句；
	        8，enableUpdateByPrimaryKey（默认true）：指定是否生成按照主键修改对象的语句（即update)；
	        9，enableDeleteByPrimaryKey（默认true）：指定是否生成按照主键删除对象的语句（即delete）；
	        10，enableDeleteByExample（默认true）：MyBatis3Simple为false，指定是否生成动态删除语句；
	        11，enableCountByExample（默认true）：MyBatis3Simple为false，指定是否生成动态查询总条数语句（用于分页的总条数查询）；
	        12，enableUpdateByExample（默认true）：MyBatis3Simple为false，指定是否生成动态修改语句（只修改对象中不为空的属性）；
	        13，modelType：参考context元素的defaultModelType，相当于覆盖；
	        14，delimitIdentifiers：参考tableName的解释，注意，默认的delimitIdentifiers是双引号，如果类似MYSQL这样的数据库，使用的是`（反引号，那么还需要设置context的beginningDelimiter和endingDelimiter属性）
	        15，delimitAllColumns：设置是否所有生成的SQL中的列名都使用标识符引起来。默认为false，delimitIdentifiers参考context的属性

	        注意，table里面很多参数都是对javaModelGenerator，context等元素的默认属性的一个复写；
     	-->
        <!-- table表生成对应的DoaminObject 两种生成方式生成的mapper不一样-->
        <table tableName="tbl_dept" domainObjectName="Dept" enableCountByExample="false" enableUpdateByExample="false"
               enableDeleteByExample="false"
               enableSelectByExample="false" selectByExampleQueryId="false"/>
        <table tableName="tbl_emp" domainObjectName="Emp" />
    </context>
</generatorConfiguration>